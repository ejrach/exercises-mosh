@model dynamic

@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>


<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    @*Zen coding (creates the markup below): div.form-group>label+input[type='text'].form-control *@
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>
    
    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            //This is javascript from: https://twitter.github.io/typeahead.js/examples/#remote
            //Bloodhound is the suggestion engine behind typeahead.

            //vm - view model.
            //When the user submits the form, this vm will be sent to the newRentals api "CreateNewRentals"
            var vm = {
                movieIds: []
            };


            //We want to tokenize 'name' of the customer.
            //Note: I commented out the prefetch so we could actually get data from a json file.
            //Note2: %QUERY gets replaced with what the user puts in the text box
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '../data/films/post_1960.json',
                remote: {
                    //url: '../data/films/queries/%QUERY.json',
                    url: '../api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            //Here is a refernce to our textbox
            //minLength - this is the minimum length a user needs to type before querying the server
            //highlight - highlights the matching characters
            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                //name - is the 'customers' model
                //display - what property we should display in the suggestion list
                //source - is the source of our bloodhound object declared by 'var'
                name: 'customers',
                display: 'name',
                source: customers
                //e is the event
                //customer is the selected customer
            }).on("typeahead:select", function (e, customer) {
                //This is what we send the Web API
                vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            //Movies
            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {

                //Append the movie from the element with the id 'movies', and add the name of the movie
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                //Get the movie element and specify the property we wanto to update
                $("#movie").typeahead("val", "");

                vm.movieIds.push(movie.id);
            });

            //This is a custom validator to validate the Customer input
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId != 0;
            }, "Please select a valid customer.");

            //This is a custom validator to validate movie selection
            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie.");

            //Validate and Submit Handler
            var validator = $("#newRental").validate({
                submitHandler: function () {
                    //Use ajax to call the server
                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    })
                    .done(function () {
                        toastr.success("Rentals successfully recorded.");
                        //console.log("done");

                        //Clear the forms and empty the movies list
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        //initialize to empty object
                        vm = { movieIds: [] };

                        validator.resetForm();
                    })
                    .fail(function () {
                        toastr.error("Something unexpected happened.");
                    });

                    return false;
                }
            });
        });
    </script>
    
}
