@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@Model.Title</h2>

@*This creates a "form" block*@
@using (Html.BeginForm("Save", "Customers"))
{
    @Html.ValidationSummary(true, "Please fix the following errors:")
    //There is special markup that we need to use here that is used
    //by Bootstrap to render dynamic forms. The classes defined here are
    //used by bootstrap to style the form and its controls.
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Name)
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" })
        @*Add validation message place holder since Name cannot be empty*@
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>
    //go to getbootstrap.com to find the class name for checkbox
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeId)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
        @*Add validation message place holder since MembershipType cannot be empty*@
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.Birthdate)
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:d MMM yyyy}", new { @class = "form-control" })
        @*Add validation message place holder. Implementing a business rule for age and membership type.*@
        @Html.ValidationMessageFor(m => m.Customer.Birthdate)
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsletter) Subscribed to Newsletter?
        </label>
    </div>
    //Helper methods
    //Because the properties in this form relies on the Id in order to save to the database, we
    //need to make this field hidden. This is an arbitrary place for it, just cleaner to put it here.
    @Html.HiddenFor(m => m.Customer.Id)
    //This creates a token and then puts it in this form as a hidden field and also as a cookie on the users computer.
    //This prevents a hacker from gaining access to the form data and sending a request on behalf of the user. This
    //token can be viewed in the inspect window for the form and needs to match with the token contained in the cookie
    //which can be viewed from Chrome inspect/Application/Cookies/localhost
    @Html.AntiForgeryToken()
    //Go to getbootstrap.com to find the class name for button
    <button type="submit" class="btn btn-primary">Save</button>
}

@*Added for client side validation of the fields in this form. This is not enabled by default,
    but you can pull in the path from 'BundleConfig' so that validation comes from the client side,
    not the server side. This is a good practice in situations like this so we don't wait for the
    server to come back and tell us that we didn't fill out the Name text box, for example.

    Note: if client side validation is enabled (like below), ValidationSummary will not work. That is a 
            server side summary.
*@
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}